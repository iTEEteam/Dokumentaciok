Use casek:

játék menete:      
g Game, main()->create g Game()->create Map->load()->g.initialize()->g.update() -> alt[noEnemies==0] ret. -> alt[enemiesIn && enemiesOut ==0] makeEnemies() -> loop enemiesIn.move() -> loop towers.shoot() 

---inicializálás: az Application létrehozza a game-t. A game létrehozza a map-ot. A Game saját magán meghívja a initialize függvényt, aminek átadja melyik pályát akarja betölteni. Az inicializál metódusban meghívja a map.load(mapName) függvényt, ami betölti a pályát. Ezután legkéri a pályának az első út celláját. 
--szekvencia:game -> create map (ret) -> game.initialize(mapName) -> map.load(mapName) -> loop|alt| create field/path||-> map.getFirstPath() -> return initből.

Torony:

---Ellenség kiválasztása lövéshez és sebzés: a torony tárolja a hatókörbe tartozó cellákat, kiválasztáskor ezeken halad végig, és lekérdezi az ott lévő ellenségeket.
--szekvencia: Tower.shoot() -> chooseEnemy() -> myField.getEnemies() (ellenségkiválasztó logika->kapunk egy enemy-t) -> enemy.hurt(Bullet) -> alt getDamage...() -> alt[health==0] i: enemy.eliminate()->enemy.myPath.deleteIpathPlaceable(enemy), n: ret
---Torony fejlesztése több féle: torony addGem(Gem) függvénye kap egy Gemet, ennek paramétereivel frissíti a tárolt Bullet paramétereit, és sajátjait, és a GemStatot.
--szekvencia: tower.addGem(gem) -> gemStat.refresh() -> bullet.refresh()
---Torony elhelyezése: mező ideraktak függvénye kap egy tornyot, a toronynak meghívjuk a register függvényét, az meghívja  a celle tornyot raktak ide fv-ét
--szekvencia: field.addIField(ifield)->ifield.register(field)-> field.registeritower(ifield)
---Torony eladása: A torony a gameStat-ból kiszámolja az értékét (alap ár+kristályok száma*kristály értéke)/2, játékos varázserejét megnöveli vele, törli a tornyot.
--szekvenciadiagram: tower.sell() -> gemStat.getValue() -> changeMana() -> tower.myField.deleteIField(tower)


Akadály:
---Akadály lerakása: az út ideraktak függvénye létrehoz egy akadályt, az akadály beregisztrálja az utat és az út is az akadályt
--szekvencia: path.addIPath()->new obstacle->path.register(obstacle), obstacle.register(path)
---Akadály fejlesztése javítás: az akadályon lévő számlálót visszaállítja
--szekvencia: repGem.upgradeObstacle(obstacle) -> obstacle.setAmort(eredeti ertek) -> return
---Akadály fejlesztése: jobban lassítás
--szekvencia: intGem.upgradeObstacle(obstacle) -> obstacle.setSlowIntens(int) -> return


Ellenfelek:
---Mozgás: beregisztrálja a path és a path is az ellenséget
--szekvencia: alt[modSpeed] enemy.myPath.getNext()->(ret path) alt[path==null] igame.incSucceeded() else path.registerIPathPlaceable(enemy)->emeny.registerPath(path)->pathRegisterEnemy(enemy)-> alt[path.myObstacle!=null] path.myobstacle.slow(enemy)->myObstacle.amortization()->alt[amort==0]->myObstacle.eliminate(myPath)->myPath.deleteIPathPlaceable(myObstacle)
Sebződés
Beér a pálya végére
Belép a pályára
Útvonalválasztás
Meghal


Cella:
Torony beregisztrálása
Akadály begerisztrálása
Ellenség rálép
Ellenség lelép róla
Ellenség meghal rajta

Lövedék

Player: 
---Játék indítás: A játékos kiválaszt egyet a képernyőn lévő pályákból. 
--szekvencia: Game g-ből indulva: map.load(mapName) -> g.initialize()
Pálya választás
Lerakások, fejlesztések, eladások lehet hogy ide kerülnek
Kilép
Mentés?

Game:
Idő múlása(tick): 
Frame frissítése (modell): update meghívása -> ellenőrzi hogy vannak e még a pályán ellenségek. ha nincsenek a game meghívja a hullám generáló függvényét.
ha vannak, akkor minden aktív ovjektumon meghívja az move(tick) függvényét

---makeEnemies: ha az enemiesIn és enemiesOut is üres, feltölti az enemiesOut-ot enemykkel
--szekvencia: loop |noEnemies-szer végighajtva | -> create Enemy (random type) -> enemiesOut.add(enemy) -> loop vége
Gui frissítése
